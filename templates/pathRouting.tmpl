//this file is auto generated

package generated

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

{{range $}}
    {{range .Handlers}}
var {{.Name}} operation.{{.Name}}
    {{end}}
{{end}}

func CreateAPIRouter() *mux.Router {
	router := mux.NewRouter()
	router.KeepContext = true

{{range $}}
	router.HandleFunc("{{.Path}}", func(res http.ResponseWriter, req *http.Request) {

		//application/vnd.Item+json
		contentType := req.Header["Content-Type"]
		if len(contentType) == 0 {
			//content type was not passed in - default?
			return
		}
		{{range $}}
		{{range .Handlers}}
		if IsHandlerForContentType("{{.Name}}",MediaTypeToTitle(contentType[0])) {
			if {{.Name}} == nil {
				//function has not been wired in
				res.WriteHeader(http.StatusNotImplemented)
				return
			}
			// TODO: deserialize
			// TODO: validate

			params := operation.{{.Params}}{}

		{{if .Body -}}
			var body {{ref .Body "generated"}}
			response := {{.Name}}.Handle(params, body)
		{{- else -}}
			response := {{.Name}}.Handle(params)
		{{end}}
			response.WriteResponse(res)
		}
		{{end}}

		//should this default since the path is valid?

		{{end}}


	}).Methods("{{.Method}}")
{{end}}


	//catch-all 404 handler
	router.HandleFunc("/{restOfRoute:.*}", func(res http.ResponseWriter, req *http.Request) {
		res.Write([]byte("404"))
	})

	return router

}

func IsHandlerForContentType(handlerName string, contentType string) bool {
	return strings.EqualFold(
		HandlerToMediaTypeTitle(handlerName), MediaTypeToTitle(contentType))
}

func MediaTypeToTitle(mediaType string) string {
	// TODO: handle */* and non application/json
	mediaType = strings.TrimPrefix(mediaType, "application/")
	mediaType = strings.TrimSuffix(mediaType, "json")
	return utils.ToPascalCase(mediaType)
}

func HandlerToMediaTypeTitle(handlerName string) string {
	parts := strings.Split(handlerName, "_")

	if len(parts) != 0 {
		return parts[len(parts)-1]
	}
	return ""
}
